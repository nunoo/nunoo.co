name: Cleanup

on:
  schedule:
    - cron: '0 3 * * SUN'
  workflow_dispatch:

jobs:
  cleanup-artifacts:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Get all artifacts
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner,
              repo,
              per_page: 100
            });
            
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            
            // Delete artifacts older than 30 days
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < thirtyDaysAgo) {
                console.log(`Deleting artifact: ${artifact.name} (${artifact.id})`);
                await github.rest.actions.deleteArtifact({
                  owner,
                  repo,
                  artifact_id: artifact.id
                });
              }
            }

  cleanup-packages:
    name: Cleanup Old Packages
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Delete old container images
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const packageName = `${context.repo.repo}-backend`;
            
            try {
              // Get all package versions
              const packages = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                package_type: 'container',
                package_name: packageName,
                org: owner,
                per_page: 100
              });
              
              const thirtyDaysAgo = new Date();
              thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
              
              // Keep latest 10 versions and delete older ones
              const versionsToDelete = packages.data
                .filter(version => new Date(version.created_at) < thirtyDaysAgo)
                .slice(10); // Keep latest 10
              
              for (const version of versionsToDelete) {
                console.log(`Deleting package version: ${version.id}`);
                await github.rest.packages.deletePackageVersionForOrg({
                  package_type: 'container',
                  package_name: packageName,
                  org: owner,
                  package_version_id: version.id
                });
              }
            } catch (error) {
              console.log(`Error cleaning up packages: ${error.message}`);
              // Continue if package doesn't exist or other errors
            }

  cleanup-workflow-runs:
    name: Cleanup Old Workflow Runs
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Delete old workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Get all workflows
            const workflows = await github.rest.actions.listRepoWorkflows({
              owner,
              repo
            });
            
            const sixtyDaysAgo = new Date();
            sixtyDaysAgo.setDate(sixtyDaysAgo.getDate() - 60);
            
            for (const workflow of workflows.data.workflows) {
              let page = 1;
              let runs;
              
              do {
                runs = await github.rest.actions.listWorkflowRuns({
                  owner,
                  repo,
                  workflow_id: workflow.id,
                  per_page: 100,
                  page
                });
                
                const oldRuns = runs.data.workflow_runs.filter(run => 
                  new Date(run.created_at) < sixtyDaysAgo && 
                  run.status === 'completed'
                );
                
                for (const run of oldRuns) {
                  console.log(`Deleting workflow run: ${run.id} from ${run.created_at}`);
                  try {
                    await github.rest.actions.deleteWorkflowRun({
                      owner,
                      repo,
                      run_id: run.id
                    });
                  } catch (error) {
                    console.log(`Error deleting run ${run.id}: ${error.message}`);
                  }
                }
                
                page++;
              } while (runs.data.workflow_runs.length === 100);
            }