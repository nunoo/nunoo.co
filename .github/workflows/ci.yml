name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  GO_VERSION: '1.25.1'

jobs:
  frontend-lint-test:
    name: Frontend Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Format check
        run: npm run format:check

      - name: Lint
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

      - name: Build frontend
        run: npm run build

  backend-lint-test:
    name: Backend Lint & Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: backend/go.sum

      - name: Install dependencies
        working-directory: backend
        run: go mod download

      - name: Format check
        working-directory: backend
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go code is not formatted properly:"
            gofmt -s -l .
            exit 1
          fi

      - name: Lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: backend
          args: --timeout=5m

      - name: Run tests
        working-directory: backend
        env:
          DATABASE_URL: postgres://test:test@localhost:5432/test?sslmode=disable
          JWT_SECRET: test-access-secret
          JWT_REFRESH_SECRET: test-refresh-secret
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: backend/coverage.out
          flags: backend
          name: backend-coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run npm audit
        run: npm audit --audit-level high
        # Note: PrismJS has unfixable moderate vulnerabilities, so we only fail on high/critical

      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run gosec
        working-directory: backend
        run: $HOME/go/bin/gosec -fmt sarif -out gosec-results.sarif ./... || true
        # Note: gosec may have false positives, so we don't fail on non-zero exit

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: backend/gosec-results.sarif
          category: gosec

      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3
